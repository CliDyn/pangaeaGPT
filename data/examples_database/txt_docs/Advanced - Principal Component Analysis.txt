#!/usr/bin/env python3
"""
Script 4: Clustering Analysis & PCA

This script performs unsupervised analysis by:
– Selecting key microbial diversity indices (here, FISH percentages)
– Standardizing the data, running a PCA to reduce dimensions
– Applying KMeans clustering (with silhouette score evaluation)
– Visualizing the clusters in the PCA-reduced space with station symbols in the legend

Citation:
Ruff, S Emil; Ramette, Alban; Boetius, Antje (2016): Metadata und statistic analysis of archaeal and bacterial sequences
originating from sediments of the Håkon Mosby mud volcano (all habitats) [dataset]. 
PANGAEA, https://doi.org/10.1594/PANGAEA.861873
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
from matplotlib.colors import ListedColormap
import seaborn as sns

from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

def load_and_prepare_diversity(filepath):
    df = pd.read_csv(filepath, sep="\t", encoding="utf-8", engine="python")
    # Remove any '#' characters that may interfere with numeric conversion.
    df = df.replace({'#': ''}, regex=True)
    # Define diversity columns based on your dataset.
    diversity_cols = [
        "EUB338 I-III [%]",
        "ARCH915 [%]",
        "DSS658 [%]",
        "MTMC701 [%]",
        "ANME-3-1249 [%]",
        "DBB660 [%]"
    ]
    # Use "Event" for annotation if available; otherwise, fallback to "Sample label".
    if "Event" in df.columns:
        keep_cols = ["Event"] + diversity_cols
    elif "Sample label" in df.columns:
        keep_cols = ["Sample label"] + diversity_cols
    else:
        keep_cols = diversity_cols
    # Convert diversity columns to numeric.
    for col in diversity_cols:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    # Drop rows with any missing values in the selected columns.
    df_div = df[keep_cols].dropna()
    return df_div

def clustering_pca(df_div):
    # Extract diversity data and (if available) annotation labels.
    if "Event" in df_div.columns:
        sample_labels = df_div["Event"].values
        X_data = df_div.drop(columns=["Event"]).values
    elif "Sample label" in df_div.columns:
        sample_labels = df_div["Sample label"].values
        X_data = df_div.drop(columns=["Sample label"]).values
    else:
        sample_labels = None
        X_data = df_div.values

    # Standardize data
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X_data)

    # PCA reduction
    pca = PCA(n_components=2)
    X_pca = pca.fit_transform(X_scaled)
    print("Explained variance ratio by PCA components:", pca.explained_variance_ratio_)

    # Determine optimal number of clusters (try k=2 to 6)
    silhouette_scores = {}
    for k in range(2, 7):
        kmeans = KMeans(n_clusters=k, random_state=42)
        labels = kmeans.fit_predict(X_pca)
        score = silhouette_score(X_pca, labels)
        silhouette_scores[k] = score
        print(f"Silhouette score for k={k}: {score:.3f}")
    best_k = max(silhouette_scores, key=silhouette_scores.get)
    print(f"Best k based on silhouette score: {best_k}")

    # Run final clustering with best_k
    final_kmeans = KMeans(n_clusters=best_k, random_state=42)
    final_labels = final_kmeans.fit_predict(X_pca)

    # Create a discrete colormap with exactly best_k colors.
    base_cmap = plt.get_cmap("tab10", best_k)
    discrete_colors = [base_cmap(i) for i in range(best_k)]
    discrete_cmap = ListedColormap(discrete_colors)

    # Create figure and Axes.
    fig, ax = plt.subplots(figsize=(8, 6))
    
    # If station labels are available, assign each unique station a unique marker.
    if sample_labels is not None:
        unique_stations = np.unique(sample_labels)
        marker_symbols = ['s', '^', 'o', 'D', 'v', 'p', '*', 'h']
        station_to_marker = {station: marker_symbols[i % len(marker_symbols)] 
                             for i, station in enumerate(unique_stations)}
        # For each station group, plot its points using colors determined by cluster.
        for station in unique_stations:
            mask = (sample_labels == station)
            # Compute a list of colors for these points based on their cluster label.
            group_colors = [discrete_colors[label] for label in final_labels[mask]]
            ax.scatter(X_pca[mask, 0], X_pca[mask, 1],
                       color=group_colors,
                       marker=station_to_marker[station],
                       s=60,
                       alpha=0.8,
                       edgecolors='k',
                       label=str(station))
    else:
        # If no station labels, plot all points with colors from cluster assignment.
        point_colors = [discrete_colors[label] for label in final_labels]
        ax.scatter(X_pca[:, 0], X_pca[:, 1],
                   color=point_colors,
                   s=60,
                   alpha=0.8,
                   edgecolors='k')
    
    ax.set_xlabel("PCA Component 1", fontsize=12)
    ax.set_ylabel("PCA Component 2", fontsize=12)
    ax.set_title("PCA and KMeans Clustering of Diversity Indices", fontsize=14)
    ax.grid(True, linestyle='--', alpha=0.6)
    
    # Create a colorbar that reflects the discrete cluster colors.
    from matplotlib.cm import ScalarMappable
    norm = plt.Normalize(vmin=0, vmax=best_k-1)
    sm = ScalarMappable(cmap=discrete_cmap, norm=norm)
    sm.set_array([])
    cbar = fig.colorbar(sm, ax=ax, ticks=np.arange(best_k))
    cbar.set_label("Cluster", fontsize=12)
    
    # Create custom legend for station markers if station labels exist.
    if sample_labels is not None:
        custom_handles = [Line2D([0], [0], marker=station_to_marker[station], color='w',
                                 markerfacecolor='gray', markeredgecolor='k', markersize=8)
                          for station in unique_stations]
        ax.legend(custom_handles, unique_stations, title="Station", loc="best", fontsize=10)
    
    fig.tight_layout()
    fig.savefig(plot_path, dpi=300) #plot_path already defined

def main():
    filepath = "/Users/dmpantiu/PycharmProjects/dev_main_Pangaea/example/HMMV_Z1-Z3_all-habitats_FISH_counts.tab"
    df_div = load_and_prepare_diversity(filepath)
    clustering_pca(df_div)

if __name__ == '__main__':
    main()
