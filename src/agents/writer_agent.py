# src/agents/writer_agent.py

import logging
from typing import List, Dict, Any
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain.agents import create_openai_tools_agent, AgentExecutor

from ..config import IS_CLI_MODE
from ..llm_factory import get_llm  # Use the new factory
# Import ONLY the necessary tool
from ..tools.writer_tools import describe_images_tool

def create_writer_agent(datasets_info: List[Dict[str, Any]] = None):
    """
    Creates the Writer Agent. It synthesizes a final report by first describing
    all generated plots and then combining that with the agent conversation history.
    """
    # Use the factory to get a powerful model for high-quality synthesis.
    # We can override the default model if needed.
    llm = get_llm(temperature=0.1)

    # A more directive prompt that enforces a specific workflow
    system_prompt = """You are a professional scientific writer. Your task is to synthesize the results from a multi-agent workflow into a single, cohesive final report.

**MANDATORY WORKFLOW:**

1.  **SCAN FOR PLOTS:** First, you MUST thoroughly review the entire conversation history provided to you. Identify ALL generated plot images by looking for file paths ending in `.png`, `.jpg`, etc., in the messages from other agents (like 'VisualizationAgent' or 'OceanographerAgent').

2.  **DESCRIBE ALL PLOTS (MANDATORY TOOL USE):** If you found any plot paths, you MUST call the `describe_images` tool. Provide it with a complete list of ALL the image paths you found. This step is NOT optional if plots exist.

3.  **SYNTHESIZE THE FINAL REPORT:** After you have the descriptions for the plots, write the final report. You will combine the key findings from the agent messages in your history with the new, detailed captions from the `describe_images` tool. The report must:
    - Start with a clear summary that directly answers the user's original query.
    - Logically present the findings from each specialist agent.
    - Integrate the plots and their new descriptions seamlessly. For example: "The sea surface temperature was analyzed (Figure 1)..."
    - Place the detailed figure captions generated by the tool at the end of the report under a "Figure Captions" heading.
    - Conclude with an overall summary.

**CRITICAL INSTRUCTIONS:**
- Your first action MUST be to scan the history for plots.
- Your second action, if plots are present, MUST be to call `describe_images`.
- Do not perform any new analysis. Your job is to report on the work already done.
- Be comprehensive and structure your response clearly with markdown.
"""

    # The ONLY tool the writer needs is the one to describe images.
    tools = [describe_images_tool]
    
    prompt = ChatPromptTemplate.from_messages(
        [
            ("system", system_prompt),
            MessagesPlaceholder(variable_name="messages"),
            MessagesPlaceholder(variable_name="agent_scratchpad"),
        ]
    )

    agent = create_openai_tools_agent(llm, tools, prompt)

    return AgentExecutor(
        agent=agent,
        tools=tools,
        verbose=True,
        handle_parsing_errors=True,
    )